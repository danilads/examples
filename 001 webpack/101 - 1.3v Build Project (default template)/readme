===========================
Git
  - (после мержа с девелопом ветку удалять)
  - Именование веток
    bug/3582
    bug/FixInput
    feat/3872
    feat/NewComponent

===========================
Code Style (ESlint Air b'n'b)
  - таб = 2 пробелам (по возможности рефакторить компоненты)
===========================
Именование компонентов
  - Все компоненты в pages должны назвыать также как url

  CashBySend/CashBySend.js
  - class CashBySend extends React.Component

  CashBySend/CashBySend.scss
  каждый комонент оборачивать в тэг с стилем
  - <div className={"CashBySend"}

  файл стиля должен иметь общий стиль в котором буду под-стили

  @import '../../style/constants.scss'; (импорт констант)

  .CashBySend{
    .someInput{

    }
  }


===========================
React
  - Использовать актуальные жизненные циклы (старые - переписывать):
    constructor
    componentDidMount
    shouldComponentUpdate
    componentDidUpdate
    componentWillUnmount

===========================
Иерархия файлов
  - папки

    01_pages/ (основные страницы) компоненты страницы именуем также как и url
      PageCards/PageCards.js

    02_components/ (комоненты)
      CashBySend/CashBySend.js
      BlockAbout/BlockAbout.js


    03_primitives/ (примитивы)
      Inputs/CustomInputWithMarker/CustomInputWithMarker.js
      

    04_images/
      images/CashBySend/main.jpg
      SVG/Input/IconSmile.js
      favicon.ico

    utils/
      utils.js (общие функции которые могут пригодится всем)

    style/
      GlobalStyle.scss (!глобальные стили)
      constants.less (стиливые константы)
      ANTDtheme.js (стили ANTD !глобальные)

    constants/
      ctGeneral.js (общие константы, которые используются во множестве файлов)
      ctCashBySend.js (именовать так - ИМЯ_ТИП_ЧТО-ДЕЛАЕТ  CASH_BY_SEND_ACTION_FETCH)

    (Redux)
    actions/
      acCashBySend.js (называть как комонент который использует данный

    reducers/
      rdCashBySend.js
===========================

Redux

//константы для action - constants/ctRedux.js


  - (в redux храним данные в исходном состоянии)
  - (используем данный подход для загружаемых данных)
  - при записи проверяем загружалли ли мы такие данные(чтобы избежать повтороной загрузки)
    let initialState = {
      data: {},
      isFetching: false,
      isLoaded: false,

      isError: false, (опционально)
      errorMsg: '', (опционально)

    };

===========================
Router и весь роут в App.js
===========================

  используем css константы 
===========================