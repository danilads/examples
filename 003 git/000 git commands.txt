<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<title></title>
	
</head>
<body>
	////////////////
	//404.html
	////////////////

			в github pages нельзя переходить по ссылкам dan.github.io/somelink
			выкинит ошибку
			но можно заменить экран ошибки страницей 404.html создав ее в корне

	////////////////
	//github pages
	////////////////

			нужно создать репозиторий с именем имяАкка, доступно будет по адресу {имяАкка}.github.io
			нужен файл index.html

	////////////////
	//ESLINT
	////////////////

			// комит без проверки
			git commit --no-verify -m 'in progress'

	////////////////
	//запушить файл
	////////////////

			git add . //добавляем все файлы для комита
			git status //статус (красным не добавленные файлы)
			git commit -m "update123" //комит и комментарий
			git push
			

			//клонировать репозиторий
			git clone https://github.com/repoName
			
			
			//перед merge - нужно сделать fetch
			git fetch // обновление истории
			git pull  //обновление текущей ветки

			
			git show-branch -list -r //показывает лист веток

	////////////////
	//Rename Branch
	////////////////
			!если не пушились то можно выполнить только первый шаг
			1.	If you are on the branch you want to rename:
				git branch -m new-name

				If you are on a different branch:
				git branch -m old-name new-name

			2. Delete the old-name remote branch and push the new-name local branch.
				git push origin :old-name new-name

			3. Reset the upstream branch for the new-name local branch.
				1) Switch to the branch and then:
				2) git push origin -u new-name
	
	////////////////
	// ACCESS
	////////////////
			
			// ---------------------
			// 01 НЕБЕЗОПАСНЫЙ СПОСОБ (на git больше неработает) можно клонировать с паролем и больше не понадобиться его вводить
			// ---------------------
				git clone https://{username}:{password}@github.com/{username}/{repo}.git
			
				git pull git clone https://{username}:{password}@github.com/{username}/{repo}.git
			
				git push --repo git clone https://{username}:{password}@github.com/{username}/{repo}.git

			// ---------------------
			// 02 Каждый раз вводить пароль
			// ---------------------
			
			// ---------------------
			// 03 Через ssh (Генерация ключа)
			// ---------------------
				!СМОТРИМ ГОТОВЫЕ КЛЮЧИ -> finder - go - go to folder -> ~/.ssh/ 
					-) Если есть ключ (по имени юзера или репо) то начинаем с пункта 4
					-) Если нету папки .ssh (она скрыта в - Macintosh HD / Users / Daniil)  - то создаем там папку .ssh и в ней -> touch config

				(ЮЗЕРНЕЙМ - чувствителен к регистру - DaNilaDS / DaNilaDS@github.com) в BITBUCKET - просто email / в GITHUB - danilads@github.com
				1) СОЗДАЕМ В Папке
					-> cd ~/.ssh
					-> ssh-keygen -t ed25519 -C "danilads@github.com"
    
					- УКАЗЫВАЕМ ИМЯ ФАЙЛА - github_danilads
					- (passphrase (опционально) -ЕСЛИ НЕ НАДО - просто два раза enter)
						Then it will ask you to create a passphrase. This is optional, either create a passphrase or press enter for no passphrase
						When you press enter, two files will be created

				2) CONFIG - в папке .ssh (finder - go - go to folder -> ~/.ssh/ )
					создаем файл config (если его нет) -> touch config

					в него добавляем: (таких блоков может быть несколько)
						(GITHUB)
							Host danilads danilads@github.com (имя аккаунта git и мейл гита)
							AddKeysToAgent yes
							UseKeychain yes
							PreferredAuthentications publickey
							IdentityFile ~/.ssh/github_danilads
							User test (имя аккаунта macbook)

						(BITBUCKET)
							Host bitbucket.org
							AddKeysToAgent yes
							IdentityFile ~/.ssh/bitbucket_danilads 


				3) КОПИРУЕМ КЛЮЧ В GIT 
					открываем терминал и вводим след команыд:
					1) cd ~/.ssh
					2) pbcopy < ~/.ssh/danilads.pub
					- Вставляем в https://github.com/settings/profile -> SSH and GPG keys -> New SSH key

				4) СКАЧАТЬ Repo нужно именно такой командой (заходим в папку с репозиториями)
					(для GitHub - git@github.com / BITBUCKET - git@bitbucket.org)
					-> ssh -T git@github.com
						ЕСЛИ "Hi danilads! You've successfully authenticated" -> то все хорошо
						ЕСЛИ НЕТ -> папке с репозиториями
								-> eval "$(ssh-agent -s)"
								-> ssh-add ~/.ssh/github_danilads 
					-> git clone git@github.com:danilads/examples.git
                

				ДАЛЕЕ В КАЖДОЙ ПАПКЕ С РЕПОЩИТОРИЕМ ДЕАЛЕМ

				1) ДОБАВЛЯЕМ В АГЕНТ - в папке с репо - открыаем консоль
					-> eval "$(ssh-agent -s)"
					-> ssh-add ~/.ssh/danilads (если создали passphrase -> ssh-add -K ~/.ssh/danilads)
					
					(Проверить добавленные -> ssh-add -l)

				2) ТЕСТИРУЕМ (в папке с репо) - ssh -T git@github.com
					Hi danilads! You've successfully authenticated, but GitHub does not provide shell access.
				
				3) Теперь в папке с репо cmd+shift+. (показать скрыте файлы)
					добавляем в папке .git -> в файл config
					
					[core]
						sshCommand = ssh -i ~/.ssh/danilads
					[user]
						name = danilads
						email = danilads32131@gmail.com
            
				// ЕСЛИ ОШИБКА Permission denied
					(в папке с репозиторием)
					-> eval "$(ssh-agent -s)"
					-> ssh-add ~/.ssh/danilads
					-> ssh -T git@github.com
					-> Hi danilads! Yo
					И Пушим через консоль

				// УДАЛИТЬ КЭШ - ЕСЛИ (удаляет все привязки)
					- Keychain Access - github - удаляем все файлы
					- удаляем все из папки ~/.ssh 
						(хранится в (/Users/ИМЯаккаунта/.ssh/) в finder - go - go to folder -> ~/.ssh/ )
					- удаляем из агента -> ssh-add -D
						(Проверить -> ssh-add -l)

				- Проверяем есть ли у нас ранее созданный -> ls -al ~/.ssh
	////////////////
	//git flow
	//https://habr.com/post/106912/
	//как узнать название "origin" конкретно в нашем репозитории  - git remote -v
	////////////////

			//создание
			git checkout -b ИмяВетки someName

			//закрытие (someName - ИмяВетки)
			git checkout someName

			git pull
			
			git merge --no-ff ИмяВетки

			(выход из vim :wq)
			
			git add .
			git commit -m "update123" //комит и комментарий
			git push origin someName

			//удаление локальной ветки
			git branch -d ИмяВетки
			//удаление ветки на сервере
			git push origin -d ИмяВетки
	

	////////////////
	//git remote change
	//изменить для url для fetch и push
	////////////////

			//проверить текущую
			git remote -v

			//изменить
			git remote set-url origin http://srv-git.service-it.by/loktev/DBOUr
	

	////////////////
	//git откатиться до комита
	//(выход из vim :wq)
	////////////////
	
			комитимся пушимся

			git log -20 (кол-во коммитов, чтобы спуститься вниз жмем enter) (в wim управление стрелочками)
			//находим имя комита 1be12hjk1kj12jkh1jk2h1

			// log по дате
			git log --after="2022-10-01 00:00" --before="2022-11-01 00:00"

			// имя комита (пробел) точка - это все файлы
			git checkout 1be12hjk1kj12jkh1jk2h1 .

			//создаем из этого комита новую ветку
			git checkout -b имяВетки

	////////////////
	// Reset HEAD
	////////////////
	
			// если проблема с head
			git checkout f6f4c18 .

			// востановим head
			git reset --hard f6f4c18

			// форс пуш срежет все до данного комита [!!!Опасный режим (удалим все комиты навсегда)]
			git push --force


	////////////////
	// INVALID user.email
	////////////////
	
			git config user.email "danilads@github.com"

	////////////////
	// git REMOVE file (if in PR some no need files)
	////////////////	

			git rm src/de.tsx
	
	////////////////
	//git CLONE (easy)
	////////////////
			-) login to github
			-) go to "settings" (avatar icon)
			-) "developer settings" (at left bottom)
			-) "personal access token"
			-) generate token -> ghp_sometoke4324

			-) git clone https://<TOKEN>@github.com/<user_name>/<repo_name>.git
			или
			-) git clone https://<TOKEN>@github.com/<repo_name>.git
	////////////////
	// объеденить несколько последних комитов в 1
	////////////////
			(протестировать на копии ветки)

			 1) где 3 - колво комитов которые нужно объеденить
			 git reset --soft HEAD~3 && git commit --edit -m"$(git log --format=%B --reverse HEAD..HEAD@{1})"
			 
			 2) далее нажимаем 'esc'
			 3) потом (выход с сохранением) :wq

			 4) (не точно) -> далее комитим и пушим

	////////////////
	// Удалть все локаьные ветки кроме выбранной а также (master и integration)
	////////////////
			git branch | egrep -v " (master|integration)$" | xargs git branch -D
</body>
</html>