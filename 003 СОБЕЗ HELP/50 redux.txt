
// ------------------------------
// --- [Redux]
// ------------------------------
Это библиотека для управления состоянием приложения


// ------------------------------
// --- [Основные принципы Redux]
// ------------------------------
1) Единый источник истины
Всё состояние приложения хранится в одном store.
Это делает отладку и синхронизацию состояния проще.

2) Состояние только для чтения
Нельзя напрямую менять state.
Изменения возможны только через action — объект, описывающий, что произошло.

3) Изменения производятся чистыми функциями (reducers)
Reducer получает текущее состояние и action → возвращает новое состояние.
Он не должен мутировать старое состояние, а создавать копию.

// ------------------------------
// --- [Основные элементы Redux]
// ------------------------------

Store	Хранилище состояния	const store = createStore(reducer)
State	Само состояние	{ count: 0 }
Action	Объект с типом и (опционально) данными	{ type: 'INCREMENT' }
Reducer	Функция, которая обновляет состояние	(state, action) => newState
Dispatch	Метод для отправки action в store	store.dispatch({ type: 'INCREMENT' })
Selector	Функция для получения части состояния	const count = useSelector(state => state.count)


// ------------------------------
// --- [ПРИМЕР]
// ------------------------------
import { Provider, useDispatch, useSelector } from 'react-redux';

// 1. Оборачиваем приложение
<Provider store={store}>
  <App />
</Provider>

// 2. Используем хуки в компоненте
function Counter() {
  const count = useSelector(state => state.count);
  const dispatch = useDispatch();
  
  return (
    <>
      <p>{count}</p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>
    </>
  );
}