// ------------------------------
// --- [–ë–ê–ó–ê]
// ------------------------------

TypeScript ‚Äî —ç—Ç–æ –Ω–∞–¥—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–¥ JavaScript.
–ï–≥–æ –ø—Ä–∏–¥—É–º–∞–ª–∞ Microsoft, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ JS —Å—Ç—Ä–æ–≥—É—é —Ç–∏–ø–∏–∑–∞—Ü–∏—é –∏ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π.
–í–µ—Å—å TS-–∫–æ–¥ –≤ –∏—Ç–æ–≥–µ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –≤ –æ–±—ã—á–Ω—ã–π JavaScript


// ------------------------------
// --- [–¢–∏–ø—ã JSX.Element, ReactElement, ReactNode]
// ------------------------------

JSX.Element
-) –≤—Å—Ç—Ä–æ–µ–Ω—ã–π —Ç–∏–ø –≤ TS
-) –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
function MyComponent(): JSX.Element {
  return <div>Hello</div>;
}


ReactElement
-) —Ç–∏–ø –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ React
-) –ï–≥–æ –º–æ–∂–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞—Ç—å (–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–ø—Å—ã)
const el: ReactElement<{ title: string }> = <MyComp title="Hi" />;


ReactNode
-) –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–∏–ø –≤—Å–µ–≥–æ, —á—Ç–æ React –º–æ–∂–µ—Ç –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å.
type Props = {
  children: React.ReactNode;
};

// ------------------------------
// --- [–û—Å–Ω–æ–≤—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞]
// ------------------------------

–¢–∏–ø—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
let age: number = 25;
let name: string  = "Alice";
let isAdmin: boolean = true;


–ú–∞—Å—Å–∏–≤—ã –∏ –æ–±—ä–µ–∫—Ç—ã
let numbers: number[] = [1, 2, 3];
let user: { name: string; age: number } = {
  name: "Bob",
  age: 30
};


–§—É–Ω–∫—Ü–∏–∏
function greet(name: string): string {
  return `Hello, ${name}`;
}


–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏ —Ç–∏–ø—ã
interface User {
  name: string;
  age: number;
}
let user: User = { name: "Anna", age: 22 };


// ------------------------------
// --- [—Ä–∞–∑–Ω–æ–µ]
// ------------------------------

Union types (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–∏–ø–æ–≤)
let id: string | number;


// ------------------------------
// --- [–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è type –æ—Ç inteface]
// ------------------------------
1)
–ò—Å–ø–æ–ª—å–∑—É–π interface –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤

–ò—Å–ø–æ–ª—å–∑—É–π type, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–∏–º–∏—Ç–∏–≤—ã –∏–ª–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ (string | number)

2)
interface —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ extends:
interface Animal {
  name: string;
}
interface Dog extends Animal {
  breed: string;
}


type —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ &
type Animal = { name: string };
type Dog = Animal & { breed: string };

// ------------------------------
// --- [–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è any –æ—Ç unknown]
// ------------------------------

any	‚Äú–ß—Ç–æ —É–≥–æ–¥–Ω–æ‚Äù ‚Äî TypeScript –ø–µ—Ä–µ—Å—Ç–∞—ë—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø—ã (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ)

unknown	‚Äú–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø‚Äù ‚Äî –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
if (typeof value === "string") {
  console.log(value.toUpperCase());
}

// ------------------------------
// --- [Generics (–æ–±–æ–±—â–µ–Ω–∏—è)]
// ------------------------------

–§—É–Ω–∫—Ü–∏—è
function identity<T>(value: T): T {
  return value;
}
let result = identity<string>("Hello");


–ú–∞—Å—Å–∏–≤
function getFirst<T>(arr: T[]): T {
  return arr[0];
}
let numbers = getFirst<number>([1, 2, 3]); // number
let words = getFirst<string>(["a", "b"]); 


–ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
function pair<K, V>(key: K, value: V): [K, V] {
  return [key, value];
}
let p = pair<string, number>("age", 25);


–î–∂–µ–Ω–µ—Ä–∏–∫ –≤ type
type MyType<T> = {
  component: T;
};
const renderMy: MyType<string> = { component: "Hello" };

// ------------------------------
// --- [ENUM]
// ------------------------------
—ç—Ç–æ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞—Ç—å –Ω–∞–±–æ—Ä –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç.

// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –Ω—É–º–µ—Ä–∞—Ü–∏—è —Å 0
enum Direction {
  Up,       // 0
  Down,     // 1
  Left,     // 2
  Right     // 3
}
let move: Direction = Direction.Up;
console.log(move); // 0

enum Role {
  Admin = "ADMIN",
  User = "USER",
  Guest = "GUEST"
}
let r: Role = Role.Admin;
console.log(r); // "ADMIN"

enum Mixed {
  No = 0,
  Yes = "YES"
}

// ------------------------------
// --- [–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã]
// ------------------------------
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç "–Ω–∞–≤–µ—à–∏–≤–∞—Ç—å—Å—è" –Ω–∞ –∫–ª–∞—Å—Å—ã, –º–µ—Ç–æ–¥—ã, —Å–≤–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ–±—ã –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
–û–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏/—Ç—Ä–∞–Ω—Å–ø–∏–ª—è—Ü–∏–∏.
üìå –í TypeScript –æ–Ω–∏ –ø–æ–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ experimental (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ)


// ------------------------------
// --- [–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã]
// ------------------------------


Partial<T>
–î–µ–ª–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.
interface User {
  id: number;
  name: string;
  age: number;
}
type UserUpdate = Partial<User>;
let u: UserUpdate = { name: "Alice" }; // —Ç–æ–ª—å–∫–æ name, –æ–∫


Required<T>
–î–µ–ª–∞–µ—Ç –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏.
interface User {
  id?: number;
  name?: string;
}
type FullUser = Required<User>;
let u: FullUser = { id: 1, name: "Bob" }; // –≤—Å—ë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ


Readonly<T>
–ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞.
interface User {
  id: number;
  name: string;
}
const user: Readonly<User> = { id: 1, name: "Alice" };
// user.name = "Bob"; ‚ùå –æ—à–∏–±–∫–∞


Pick<T, K>
–í—ã–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ç–∏–ø–∞.
interface User {
  id: number;
  name: string;
  age: number;
}
type UserPreview = Pick<User, "id" | "name">;
let u: UserPreview = { id: 1, name: "Alice" };


Omit<T, K>
–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ—Å—Ç—å Pick ‚Äî —É–±–∏—Ä–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏.
type UserWithoutAge = Omit<User, "age">;
let u: UserWithoutAge = { id: 1, name: "Bob" };


Record<K, T>
–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø, –≥–¥–µ –∫–ª—é—á–∏ = K, –∑–Ω–∞—á–µ–Ω–∏—è = T.
type Roles = "admin" | "user" | "guest";
type RolePermissions = Record<Roles, boolean>;
let perms: RolePermissions = {
  admin: true,
  user: true,
  guest: false
};


Exclude<T, U>
–ò—Å–∫–ª—é—á–∞–µ—Ç –∏–∑ T –≤—Å–µ —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Ö–æ–¥—è—Ç –≤ U.
type Status = "new" | "in-progress" | "done";
type WithoutDone = Exclude<Status, "done">;
// "new" | "in-progress"



// ------------------------------
// --- [–ü–†–ò–ú–ï–†]
// ------------------------------


interface MyComponentProps {
  width: number | string;
  text: string;
}

const MyComponent = ({ width, text }: MyComponentProps): JSX.Element => {
  return <div style={{ width }}>{text}</div>;
};


const MyComponent: React.FC<MyComponentProps> = ({ width, text }) => {
  return <div style={{ width }}>{text}</div>;
};

