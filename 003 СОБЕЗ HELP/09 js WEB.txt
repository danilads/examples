// ------------------------------
// --- [SSR CSR]
// ------------------------------

///////
SSR (Server-Side Rendering)
HTML страницы рендерится на сервере, и уже готовая разметка отправляется клиенту.

Плюсы SSR
Быстрая первая загрузка (First Paint)
SEO-friendly (поисковики видят контент сразу)
Подходит для динамических, контентных сайтов (новости, блоги)

Минусы SSR
Увеличенная нагрузка на сервер
Дольше время отклика при навигации между страницами
Сложнее кешировать и деплоить


////////
CSR (Client-Side Rendering)
Сервер отдает пустой HTML + JS, а контент рендерится в браузере с помощью JavaScript.

Плюсы CSR
После первой загрузки — мгновенная навигация (SPA)
Меньше нагрузки на сервер
Можно легко кэшировать статический бандл

Минусы CSR
Медленный первый рендер (JS грузится и исполняется)
SEO-проблемы, если нет пререндеринга

// ------------------------------
// --- [ASYNC AWAIT]
// ------------------------------
async function foo() {
  let promise = new Promise((resolve) => {
    setTimeout(() => resolve("Готово!"), 2000);
  });

  return await promise; // ждём завершения promise
}

foo().then(result => console.log(result)); // 42


// ------------------------------
// --- [PROMOSE]
// ------------------------------

Promise (промис) в JavaScript — это функция (объект), который хранит результат асинхронной операции

const promise1 = new Promise((resolve, reject) => {
          setTimeout(() => {
            resolve("resolve");
          }, 2000);
        })
        .then((value) => {
          console.log(value);
          // Expected output: "foo"
        })
        .catch((error) => {
          console.error("Ошибка запроса:", error);
        })
        .finally(() => {
          console.log("Запрос завершён");
        });

fetch("https://jsonplaceholder.typicode.com/posts/1")
  .then(response => {
    if (!response.ok) {
      throw new Error("Ошибка HTTP: " + response.status);
    }
    return response.json(); // тоже возвращает Promise
  })
  .then(data => {
    console.log("Данные:", data);
  })
  .catch(error => {
    console.error("Ошибка запроса:", error);
  })
  .finally(() => {
    console.log("Запрос завершён");
  });     



Promise.all([p1, p2, p3]) → runs multiple promises in parallel, resolves when all succeed (or rejects if one fails).

Promise.race([p1, p2]) → resolves/rejects as soon as the first promise settles.

Promise.allSettled([p1, p2]) → waits for all promises, regardless of success or failure.

Promise.any([p1, p2]) → resolves when the first successful promise resolves.


// ------------------------------
// --- [TIMEOUT]
// ------------------------------

await new Promise(res=>setTimeout(res,5000))



// ------------------------------
// --- [WEB API]
// ------------------------------

Web API — это набор функций и объектов, которые предоставляет браузер (или среда исполнения, например Node.js), чтобы JavaScript мог работать с внешним окружением.
setTimeout, setInterval, fetch, localStorage, sessionStorage


// ------------------------------
// --- [AJAX]
// ------------------------------

AJAX ( Asynchronous JavaScript And XML) — это технология, которая позволяет обновлять часть веб-страницы без полной перезагрузки.



// ------------------------------
// --- [Структура HTTP]
// ------------------------------

1) Стартовая строка
GET /index.html HTTP/1.1

2) Заголовки (Headers) - метаданные


3) Тело сообщения (Body)
Содержит основные данные — HTML, JSON, файл и т.д.
<html><body>Привет, мир!</body></html>
{"status": "ok", "data": [1,2,3]}


// ------------------------------
// --- [HTTP - коды ошибок]
// ------------------------------

1xx — Информационные
  100 Continue – сервер говорит: «окей, присылай тело запроса».

2xx — Успешные
  200 OK – запрос успешно выполнен.
  201 Created – успешно создан новый ресурс (обычно при POST).
  204 No Content – успешно, но без ответа (например, при DELETE).

3xx — Перенаправления
  301 Moved Permanently – ресурс переехал навсегда.
  302 Found – временный редирект.
  304 Not Modified – клиент может использовать кэшированную версию.

4xx — Ошибки клиента
  400 Bad Request – некорректный запрос (неправильный JSON, параметры).
  401 Unauthorized – нет авторизации (например, не передан Authorization токен).
  403 Forbidden – доступ запрещён, даже если авторизован.
  404 Not Found – ресурс не найден.
  405 Method Not Allowed – метод (например, POST) запрещён для этого URL.
  409 Conflict – конфликт (например, регистрация уже существующего пользователя).
  429 Too Many Requests – слишком много запросов (лимит API).

5xx — Ошибки сервера
  500 Internal Server Error – ошибка на стороне сервера.
  502 Bad Gateway – шлюз/прокси получил неверный ответ от сервера.
  503 Service Unavailable – сервер временно недоступен (перегрузка, тех. работы).
  504 Gateway Timeout – сервер не ответил вовремя.


// ------------------------------
// --- [CORS]
// ------------------------------
1. Что такое CORS
Браузеры по умолчанию запрещают запросы с одного домена к другому, чтобы защитить пользователей (это называется политика одинакового происхождения — same-origin policy).
CORS — механизм, который позволяет серверу явно разрешать доступ к своим ресурсам с других доменов.

// ------------------------------
// --- [1-REST]
// ------------------------------
 
REST (Representational State Transfer) - Классический стиль архитектуры для API.
Принцип: каждый ресурс (например, пользователь, товар) доступен по URL-адресу.

Формат данных: чаще всего JSON.

Методы HTTP:
GET — получить ресурс
POST — создать
PUT/PATCH — обновить
DELETE — удалить

Плюсы:
Простота и предсказуемость.
Легко кешировать.
Хорошо поддерживается во всех фреймворках.

Минусы:
Возвращает фиксированные данные, иногда «лишние».


// ------------------------------
// --- [2-GraphQL]
// ------------------------------
 
Альтернатива REST, разработанная Facebook.
Принцип: клиент сам формулирует запрос, указывая, какие именно поля нужны.
Единая точка входа: обычно /graphql.
Формат данных: всегда JSON.
query {
  user(id: 123) {
    name
    email
    posts {
      title
    }
  }
}

Плюсы:
Нет «лишних данных» (экономия трафика).
Один запрос может заменить несколько REST-запросов.

Минусы:
Не всегда хорошо кешируется.
Иногда перегружает сервер сложными запросами.

// ------------------------------
// --- [3-WEB socket]
// ------------------------------
 
Технология для двунаправленной связи между клиентом и сервером.
В отличие от REST/GraphQL, которые работают поверх HTTP (запрос–ответ), WebSocket позволяет держать постоянное соединение.

Плюсы:
Низкая задержка.
Отлично подходит для real-time приложений.
Минусы:
Не кешируется

