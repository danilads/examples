
// ------------------------------
// --- [привидение типов] 
// ------------------------------
+'2.2' - число 2.2
parseInt('2.2') - число 2 / parseFloat('2.2') - 2.2
!!'0' - true / !!+'0' - false / !!'' - false / !!' ' - true
numb.toString();


// ------------------------------
// --- [ VAR LET CONST] 
// ------------------------------
VAR
Поднятие (Hoisting): переменная доступна до объявления, но значение будет undefined.
console.log(a); // undefined
var a = 5;
Можно переопределять и присваивать заново.
Область видимости: функция или глобальная.
function example() {
  var x = 10;
  if (true) {
    var x = 20; // та же переменная x
    console.log(x); // 20
  }
  console.log(x); // 20
}


LET
Область видимости: блочная (то есть внутри {}).
Поднятие: нельзя использовать до объявления.
Можно переопределять и присваивать заново.
function example() {
    let x = 10;
    if (true) {
        let x = 20; // НЕ та же переменная x
        console.log(x); // 20
    }
    console.log(x); // 10
}


CONST
Область видимости: блочная, как у let.
Поднятие: нельзя использовать до объявления.
Обязательное начальное присваивание.
Нельзя менять значение примитивов.

// ------------------------------
// --- [CИМВОЛЫ] 
// ------------------------------
console.log(str.charCodeAt()); // 65
console.log(String.fromCharCode(65)); // "A"
console.log(str.toUpperCase()); // "A"
console.log(str.toLowerCase()); // "a"


// ------------------------------
// --- [ТИПЫ ДАННЫХ] 
// ------------------------------

String 
Number
null
undefined
Boolean

Function
Object
Array - Array.isArray([]) 

Date, RegExp, Promise

FormData




// ------------------------------
// --- [ТИПЫ ДАННЫХ] typeof 
// ------------------------------

'string' ---- ''  ""  ``
'undefined' ---- undefined
'number' ---- числа  Infinity  -Infinity  NaN
'boolean' ---- 0, "", null, undefined, NaN, false
'function' ---- function(){}

'object' ---  Array, Date, RegExp, Promise



// ------------------------------
// --- [SPREAD]
// ------------------------------

Копирование массива
const arr1 = [...arr2];

Объединение массивов
const arr3 = [...arr1, ...arr2];

Передача элементов как аргументов функции
const sum = (x, y, z) => {
  return x + y + z;
}
const numbers = [1, 2, 3];
console.log(sum(...numbers)); // 6

Копирование объекта
const obj2 = { ...obj1 };


Слияние объектов
const obj = { ...objA, ...objB };

// ------------------------------
// --- IF ELSE
// ------------------------------

if (условие1) {
  
} else if (условие2) {
  
} else {
  
}

// ------------------------------
// --- SWITCH
// ------------------------------

const grade = "B";

switch (grade) {
    case "A":
        console.log("не отработает");
    case "B":
        console.log("отработает 1");
    case "C":
        console.log("отработает 2");
        break;
    default:
        console.log("не отработает");
}

// ------------------------------
// --- .target / .currentTarget
// ------------------------------


event.target
Элемент, на котором произошло событие (вложенный)
Может быть вложенным элементом внутри обработчика.

event.currentTarget
Элемент, на который навешан обработчик события.
Всегда совпадает с тем элементом, у которого вызван


// ------------------------------
// --- [JSON.stringify(obj) / JSON.parse(json)] 
// ------------------------------

При копировании потеряются 

undefined	- Игнорируется в объектах, превращается в null в массивах
Function - (функции)	Игнорируются, не сериализуются
Date	- Превращается в строку ISO ("2025-10-03T12:34:56.789Z") — при JSON.parse не станет объектом Date, а будет обычной строкой
RegExp	- Превращается в {} (теряется информация о регулярном выражении)

// ------------------------------
// --- [window] 
// ------------------------------
redirect - <div onClick="window.location.href='http://localhost:2'">

1. Навигация / работа со страницей
window.location.href → получить или изменить URL (редирект).
window.open(url, target) → открыть новое окно или вкладку.
window.close() → закрыть текущее окно (работает только для окон, открытых скриптом).
window.history.back() / window.history.forward() / window.history.go(n) → управление историей.

2. Диалоги
window.alert("Сообщение") → простое сообщение.
window.confirm("Вы уверены?") → даёт выбор OK/Cancel (true/false).
window.prompt("Введите имя:") → окно с вводом текста.

3. Таймеры
window.setTimeout(fn, ms) → выполнить функцию один раз через время.
window.setInterval(fn, ms) → выполнять функцию регулярно через заданный интервал.
window.clearTimeout(id) / window.clearInterval(id) → остановка таймеров.

4. Размеры и прокрутка
window.scrollTo(x, y) → прокрутить страницу в указанное место.
window.scrollBy(dx, dy) → прокрутить относительно текущего положения.
window.innerWidth / window.innerHeight → размеры окна (внутренняя часть).
window.outerWidth / window.outerHeight → размеры всего окна браузера.

5. Слушатели событий
window.addEventListener("resize", fn) → реагировать на изменение размера окна.
window.addEventListener("scroll", fn) → реагировать на прокрутку.
window.removeEventListener(type, fn) → удалить слушатель.

// ------------------------------
// --- [document] 
// ------------------------------

Поиск элементов
document.getElementById(id) – ищет по id.
document.getElementsByClassName(className) – коллекция по классу.
document.getElementsByTagName(tag) – коллекция по тегу.
document.getElementsByName(name) – элементы с атрибутом name.
document.querySelector(css) – первый элемент по CSS-селектору.
document.querySelectorAll(css) – все элементы по селектору (NodeList).

Создание и изменение
document.createElement(tagName) – создаёт новый элемент.
document.createTextNode(text) – создаёт текстовый узел.
document.write(html) – вставка HTML прямо в документ (обычно не рекомендуется).
document.writeln(html) – как write, но с переводом строки.

Работа с DOM-деревом
document.appendChild(node) – добавить узел в конец.
document.insertBefore(newNode, referenceNode) – вставить перед указанным.
document.removeChild(node) – удалить дочерний узел.
document.replaceChild(newNode, oldNode) – заменить узел.

События
document.addEventListener(type, listener) – слушатель событий.
document.removeEventListener(type, listener) – удалить слушатель.
document.dispatchEvent(event) – вызвать событие вручную.


// ------------------------------
// --- [Событийная модель / Event Flow] 
// ------------------------------
Когда событие "идёт" по дереву DOM, есть три фазы:

1) Capturing (погружение) — сверху вниз (от window → document → html → … → элемент).
2) Target (цель) — сам элемент, на котором произошло событие. - отработает клик на div
3) Bubbling (всплытие) — снизу вверх (от элемента обратно до window). - здесь отработает event listener

По умолчанию обработчики работают на фазе всплытия.

ОСТАНОВИТЬ - event.stopPropagation() – остановить всплытие.

// ------------------------------
// --- [event.] 
// ------------------------------
event.target – на каком элементе реально произошло событие. (вложенный)
event.currentTarget – тот элемент, на который навешан обработчик события.
event.stopPropagation() – остановить всплытие.
event.preventDefault() – отменить стандартное (браузерное) поведение элемента (a href="..."> <submit>  <input type="checkbox")



preventDefault что это конкретнее

// ------------------------------
// --- [Нормализация данных] 
// ------------------------------
Нормализация данных в JavaScript — это процесс приведения данных к единому, удобному и предсказуемому виду.

Она нужна, чтобы:
- облегчить обработку и поиск данных,
- избежать дублирования,
- ускорить работу с коллекциями (например, при работе с API или базой данных).

// ------------------------------
// --- [prototype] 
// ------------------------------

prototype — это объект, от которого другие объекты могут наследовать свойства и методы.

В JS наследование идёт по цепочке прототипов (prototype chain).

У функций-конструкторов есть свойство prototype. Все созданные через new экземпляры будут его использовать.

У объектов есть скрытое свойство __proto__, которое указывает на prototype их конструктора.



// ------------------------------
// --- [JSdoc] 
// ------------------------------

/**
 *  Takes 2 numbers and returns their sum.
 *  @param   {number} a the first number
 *  @param   {number} b the second number
 *
 *  @returns {number} the sum of a and b
 */

// ------------------------------
// --- [userAgent] 
// ------------------------------


navigator.userAgent.includes("Edge")
navigator.userAgent.includes("MSIE")
navigator.userAgent.includes("Trident")
navigator.userAgent.includes("Firefox")
navigator.userAgent.includes("Opera")
navigator.userAgent.includes("Chrome")
navigator.userAgent.includes("Safari")


// ------------------------------
// --- [call  apply  bind] 
// ------------------------------
Все три метода — это способы явно задать this при вызове функции


// call
Вызывает функцию сразу, передавая аргументы через запятую.
function greet(greeting) {
  console.log(`${greeting}, ${this.name}`);
}
const user = { name: "Alice" };
greet.call(user, "Hi"); // "Hi, Alice"


// apply
То же, что call, но аргументы передаются массивом.
function greet(greeting) {
  console.log(`${greeting}, ${this.name}`);
}
greet.apply(user, ["Hello"]); // "Hello, Alice"


// bind
Не вызывает функцию сразу, а возвращает новую функцию с привязанным this.
function greet(greeting) {
  console.log(`${greeting}, ${this.name}`);
}
const greetUser = greet.bind(user, "Hey");
greetUser(); // "Hey, Alice"


// ------------------------------
// --- [instanceof] 
// ------------------------------

Оператор instanceof проверяет, находится ли объект в цепочке прототипов конструктора.

function Animal() {}
const a = new Animal();

console.log(a instanceof Animal); // true
console.log(a instanceof Object); // true
console.log(a instanceof Array);  // false

// ------------------------------
// --- [деструктуризация] 
// ------------------------------

// Пример с объектом:
const user = { name: "Alice", age: 25 };
const { name, age } = user;
console.log(name); // "Alice"
console.log(age);  // 25

// Пример с массивом:
const arr = [10, 20];
const [a, b] = arr;
console.log(a, b); // 10, 20

// Значения по умолчанию с объектом:
const person = { name: "John", city: "Paris" };
const { city = "Unknown" } = person;
console.log(city); // "Paris"

// Значения по умолчанию с массивом:
const [a = 10, b = 20] = [5];
console.log(a, b); // 5, 20


// Деструктуризация в функциях
function greet({ name, age }) {
  console.log(`Hello ${name}, age ${age}`);
}

const user = { name: "Alice", age: 25 };
greet(user); // Hello Alice, age 25

// ------------------------------
// --- [setTimeout / setInterval] 
// ------------------------------
useEffect(() => {
    const id = setTimeout(() => {
      console.log("run once");
    }, 2000);

    return () => clearTimeout(id); // cleanup
  }, []); 


// ------------------------------
// --- [FormData] 
// ------------------------------
FormData — это объект (object), экземпляр встроенного класса FormData, то есть специальный тип объектa, предназначенный для работы с данными формы

const dataFD  = new FormData();
console.log(typeof dataFD );     // "object"
console.log(dataFD  instanceof FormData); // true


// Основные методы
append(name, value)	 -  Добавляет новое значение по ключу (можно несколько одинаковых ключей)
set(name, value)  - 	Устанавливает (перезаписывает) значение
get(name)	 -  Возвращает первое значение по ключу
getAll(name)	-  Возвращает все значения по ключу (если их несколько)
has(name)	 -  Проверяет, есть ли ключ

// Перебор
dataFD.forEach((value, key) => {
  console.log(`${key}: ${value}`);
});



fetch('/api/profile', {
  method: 'POST',
  body: dataFD, // multipart/form-data
});