
// ------------------------------
// --- [ОСНОВНЫЕ]
// ------------------------------
git add . //добавляем все файлы для комита
git status //статус (красным не добавленные файлы)
git commit -m "update123" //комит и комментарий
git push


//клонировать репозиторий
git clone https://github.com/repoName


//перед merge - нужно сделать fetch
git fetch // обновление истории
git pull  //обновление текущей ветки




// ------------------------------
// --- [GIT FLOW]
// ------------------------------
Git Flow — это стратегия ветвления, предложенная Винсентом Дриссеном (Vincent Driessen).
Она определяет чёткие правила и структуру веток для командной разработки.

main (или master)	Хранит стабильный, продакшен-код. Только проверенные релизы.
develop	Главная ветка для разработки. Всё, что будет в следующем релизе.
feature/*	Новые фичи и улучшения. Создаются от develop, сливаются обратно туда.
release/*	Подготовка релиза. Тестирование, мелкие фиксы. Сливается в main и develop.
hotfix/*	Срочные исправления багов в продакшене. Создаются от main, потом сливаются в main и develop.




// ------------------------------
// --- [git revert]
// ------------------------------
это способ отменить изменения из коммита, не переписывая историю, а создавая новый коммит, который делает “обратное” действие

Допустим, у тебя есть история:
A — B — C — D (HEAD -> main)
Ты понял, что коммит C внёс ошибку, но коммит D уже есть, и ты не хочешь переписывать историю.
Ты выполняешь:
git revert C
Git создаёт новый коммит, который отменяет изменения из C, но не трогает сам коммит C:
A — B — C — D — E (HEAD -> main)
Коммит E — это "revert commit", который возвращает код в состояние, будто коммита C не было.

// ------------------------------
// --- [git reset]
// ------------------------------
Это отменяет все изменения в файлах, которые не были закоммичены.
git reset --hard a1b2c3d

// ------------------------------
// --- [git log]
// ------------------------------
это инструмент для просмотра истории коммитов в репозитории Git.



// ------------------------------
// --- [git cherry-pick]
// ------------------------------
git cherry-pick — это инструмент в Git, который позволяет взять один или несколько конкретных коммитов из одной ветки и применить их в другую.




// ------------------------------
// --- [.gitignore]
// ------------------------------
# 01 комментарии через решетку

# 02 игнорировать все
*
#кроме файлов
!.babelrc
!.gitignore
!App.js
!index.html
!package-lock.json
!package.json
!webpack.config.js

#кроме папки и файлов содержащихся в ней
!/components/
!/components/*

#кроме папки и всех подпапок и файлов содержащихся в ней
!/components/
!/components/**

# 03 запретить везде файл с таким иненем и с таким расширением
**/system.log
**.txt

# 04 просто файл в корне
yarn.lock
