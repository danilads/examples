
// ------------------------------
// --- [1. Глобальная область (Global Scope)]
// ------------------------------

Всё, что объявлено вне функций/блоков, живёт в глобальном объекте (window в браузере, global в Node.js).

Доступно в любом месте кода.

var a = 10;   // глобальная переменная
let b = 20;   // тоже глобальная (но не на window!)
console.log(window.a); // 10
console.log(window.b); // undefined


// ------------------------------
// --- [2. Функциональная область (Function Scope)]
// ------------------------------

Всё, что объявлено с помощью var внутри функции, доступно только в ней.

function test() {
  var x = 5;
  console.log(x); // 5
}
console.log(x); // ❌ Ошибка: x is not defined


// ------------------------------
// --- [3. Блочная область (Block Scope)]
// ------------------------------

У let и const есть область видимости внутри блока {}.

var такой области не имеет!

if (true) {
  var a = 1;      // вылезет наружу
  let b = 2;      // только внутри if
  const c = 3;    // только внутри if
}
console.log(a); // 1
console.log(b); // ❌ Ошибка
console.log(c); // ❌ Ошибка

// ------------------------------
// --- [4. Область видимости модулей (Module Scope)]
// ------------------------------


В ES6-модулях (import/export) всё, что объявлено в файле, не попадает в глобальную область.

Доступно только внутри этого модуля, если явно не экспортировать.
// module.js
const secret = 42;
export const answer = 42;

// main.js
import { answer } from "./module.js";
console.log(answer); // 42
console.log(secret); // ❌ Ошибка

// ------------------------------
// --- [5. Замыкания (Closures)]
// ------------------------------



Замыкание — это функция, которая «запоминает» область, в которой была создана, даже если вызывается снаружи.
function counter() {
  let count = 0;
  return function () {
    count++;
    return count;
  };
}

const inc = counter();
console.log(inc()); // 1
console.log(inc()); // 2
console.log(inc()); // 3
